name: "Terraform action"
on:
  push:
    branches:
      - master
  pull_request:
permissions:
      id-token: write # This is required for aws oidc connections (Try 4)
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub-OIDC-TERRAFORM
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build connect ECR
        uses: int128/create-ecr-repository-action@v1
        id: connect-ecr
        env:
          AWS_ECR_NAME: ${{ secrets.AWS_ECR_NAME_CONNECT }}
        with:
          repository: $AWS_ECR_NAME

      - name: Build, tag, and push connect image to Amazon ECR
        id: build-image-connect
        env:
          AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          AWS_IMAGE_CONNECT_TAG: ${{ secrets.AWS_ECR_NAME_CONNECT }}-${{ github.sha }}
          AWS_ECR_REPOSITORY: ${{ steps.connect-ecr.outputs.repository-uri }}
        run: |
          docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_CONNECT_TAG --target ${{ secrets.AWS_ECR_NAME_CONNECT }} .
          docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_CONNECT_TAG
          echo "::set-output name=image::$AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_CONNECT_TAG"

      # - name: Build, tag, and push disconnect image to Amazon ECR
      #   id: build-image-disconnect
      #   env:
      #     AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     AWS_IMAGE_DISCONNECT_TAG: ${{ secrets.AWS_ECR_NAME_DISCONNECT }}-${{ github.sha }}
      #     AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_NAME_DISCONNECT }}
      #   run: |
      #     aws ecr create-repository --repository-name $AWS_ECR_REPOSITORY
      #     docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_DISCONNECT_TAG --target ${{ secrets.AWS_ECR_NAME_DISCONNECT }} .
      #     docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_DISCONNECT_TAG
      #     echo "::set-output name=image::$AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_DISCONNECT_TAG"

      # - name: Build, tag, and push sendvendor image to Amazon ECR
      #   id: build-image-sendvendor
      #   env:
      #     AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     AWS_IMAGE_SENDVENDOR_TAG: ${{ secrets.AWS_ECR_NAME_SENDVENDOR }}-${{ github.sha }}
      #     AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_NAME_SENDVENDOR }}
      #   run: |
      #     aws ecr create-repository --repository-name $AWS_ECR_REPOSITORY
      #     docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_SENDVENDOR_TAG --target ${{ secrets.AWS_ECR_NAME_SENDVENDOR }} .
      #     docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_SENDVENDOR_TAG
      #     echo "::set-output name=image::$AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_SENDVENDOR_TAG"

      # - name: Setup Terraform 
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 1.2.5
      #     working-directory: ./terraform

      # - name: Terraform fmt
      #   id: fmt
      #   working-directory: ./terraform
      #   run: terraform fmt -check
      #   continue-on-error: true

      # - name: Terraform Init
      #   id: init
      #   working-directory: ./terraform
      #   env:
      #     AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      #     AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #   run: > 
      #     terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" 
      #     -backend-config="key=${AWS_BUCKET_KEY_NAME}" 
      #     -backend-config="region=${AWS_REGION}"

      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color
      #   working-directory: ./terraform

      # - name: Terraform Plan
      #   id: plan
      #   working-directory: ./terraform
      #   run: terraform plan -no-color
      #   if: github.event_name == 'pull_request'

      # - name: Terraform Run
      #   id: run
      #   uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     working-directory: ./terraform
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       <details><summary>Validation Output</summary>

      #       \`\`\`\n
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`
 
      #       </details>

      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Terraform Plan Status
      #   id: status
      #   working-directory: ./terraform
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      # - name: Terraform Apply
      #   id: apply
      #   working-directory: ./terraform
      #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false
