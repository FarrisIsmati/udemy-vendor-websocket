# Docker commands testing locally
Docker commands

docker build -t connect --target connect .
docker build -t disconnect --target disconnect .
docker build -t sendvendor --target sendvendor .

docker run -p 9000:8080 connect:latest
docker run -p 9001:8080 disconnect:latest
docker run -p 9002:8080 sendvendor:latest

curl -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" -d '{}'
curl -XPOST "http://localhost:9001/2015-03-31/functions/function/invocations" -d '{}'
curl -XPOST "http://localhost:9002/2015-03-31/functions/function/invocations" -d '{}'

# WEBSOCKET COMMAND HELP
TO TEST THE websocket
npm i -g wscat

Test connect : wscat -c "url" (wscat -c "wss://8ramd7iqs7.execute-api.us-east-1.amazonaws.com/primary")
Test disconnect: quitting
Test a send message by running: {"action":"sendvendor", "data":"Hello world!"}


# STEPS WHEN RECORDING
GATEWAY REPO SETUP #ENSURE YOU RENAME ALL OF THIS TO GATEWAY BECAUSE IT CONTAINS BOTH WEBSOCKET AND HTTP PROTOCOLS
0. High level overview of websockets and how it all will work (real time communication, persist connection state, update all connections)
1. Create github repo online (setup all actions needed) secrets
2. .gitignore, .dockerignore, package.json (add dependencies), tsconfig.json (ensure its there) (all core basics)
3. setup .github/workflows/main.yml file (Keep terraform & ECR/BUILD/PUSH commands commented out) (Talk about changes not including new commented out code)

DOCKERFILE SETUP
1. Dockerfile (setup dockerifle for connect.ts) (note copy logic we are copying everything including methods we dont need, could split up lambda, use complex copy logic, but I find this suitable given its a small file)
2. connect.ts (Write and test docker local build commands)
3. Dockerfile (setup dockerifle for disconnect.ts, send-vendor.ts)
4. disconnect.ts, send-vendor.ts (Quickly setup code as step 3. but faster let user know we just covered this in detail)
5. connect.ts (Write main.yml code) (test if updates on ECR)
6. disconnect.ts, send-vendor.ts (Quickly setup code as step 5. but faster let user know we just covered this in detail)
8. GET VENDOR

WEBSOCKET LAMBDA CODE
1. aws.ts (Copy & paste the 3 methods you previously covered) (talk about changes)
2. aws.ts (Add broadcastMessage) (talk about what it does)
3. connect.ts (code meat)
4. disconnect.ts (code meat)
5. send-vendor.ts (code meat)
8. GET VENDOR

WEBSOCKET TERRAFORM SETUP
1. main.tf & variables.tf (includes setup on main.yml) (Create no test)
2. IAM.tf (Create, check if in AWS)
3. lambda.tf (Create, check if in AWS)
4. api_gateway.tf (Create, check if in AWS)
5. Test build (use websocket commands, check AWS)
6. Troubleshooting (common issues)
